<#assign x = 1> 
{
"steps": [
<#list mbs as mb><#-- CREATION OF STREAMS ON CEP   -->
<#if source.type!="Internal">
{
"number": "${x}",<#assign x = x+1> 
"description":"update Registrare gli Stream in un nodo CEP di tipo direct", 
"actionType":"WebServiceCall",
"sourceType":"file",
"source":"cepconfig/reg_streams/api__update__direct__${tenant.code}__${source.code_}_${stream.code}.xml",
"action":"editEventStreamInfo",
"destination":"${mb.host}/services/EventStreamAdminService",
"returnExpected":"200", 
"validityControl":"<fault>",
"username":"${mb.secuser}", 
"password":"${mb.secpassword}"
}
 <#if (stream.usedInInternalCount>0)>
,{
"number": "${x}",<#assign x = x+1> 
"description":"update Registrare gli Stream in un nodo CEP di tipo input", 
"actionType":"WebServiceCall",
"sourceType":"file",
"source":"cepconfig/reg_streams/api__update__input__${tenant.code}__${source.code_}_${stream.code}.xml",
"action":"editEventStreamInfo",
"destination":"${mb.host}/services/EventStreamAdminService",
"returnExpected":"200", 
"validityControl":"<fault>",
"username":"${mb.secuser}", 
"password":"${mb.secpassword}"
}
 </#if>
<#else>
 <#list internalStreamInfo as internalStream>
{
"number": "${x}",<#assign x = x+1> 
"description":"update Registrare gli Stream in un nodo CEP di tipo input per i figli", 
"actionType":"WebServiceCall",
"sourceType":"file",
"source":"cepconfig/reg_streams/api__update__input__${internalStream.tenantCode}__${internalStream.veCode_}_${internalStream.streamCode}.xml",
"action":"editEventStreamInfo",
"destination":"${mb.host}/services/EventStreamAdminService",
"returnExpected":"200", 
"validityControl":"<fault>",
"username":"${mb.secuser}", 
"password":"${mb.secpassword}"
},
 </#list>
{
"number": "${x}",<#assign x = x+1> 
"description":"Registrare gli Stream in un nodo CEP", 
"actionType":"WebServiceCall",
"sourceType":"file",
"source":"cepconfig/reg_streams/api__update__output__${tenant.code}__${source.code_}_${stream.code}.xml",
"action":"editEventStreamInfo",
"destination":"${mb.host}/services/EventStreamAdminService",
"returnExpected":"200", 
"validityControl":"<fault>",
"username":"${mb.secuser}", 
"password":"${mb.secpassword}"
}
</#if>
<#if mb_has_next>,</#if>
</#list>
<#list mbs as mb> <#-- CREATION OF BUILDERS ON CEP   -->
<#if source.type!="Internal">
,{
"number": "${x}",<#assign x = x+1> 
"description":"Installazione event Builder per ogni nodo CEP : direct__${tenant.code}__${source.code_}__${stream.code}__EventBuilder", 
"actionType":"WebServiceCall",
"sourceType":"file",
"source":"cepconfig/eventbuilders/api__update__direct__${tenant.code}__${source.code_}_${stream.code}__EventBuilder.xml",
"action":"editActiveEventBuilderConfiguration",
"destination":"${mb.host}/services/EventBuilderAdminService",
"returnExpected":"200", 
"validityControl":"<fault>",
"username":"${mb.secuser}", 
"password":"${mb.secpassword}"
}
<#if (stream.usedInInternalCount>0)>
,{
"number": "${x}",<#assign x = x+1> 
"description":"Installazione event Builder per ogni nodo CEP : ${tenant.code}__${source.code_}__${stream.code}__EventBuilder", 
"actionType":"WebServiceCall",
"sourceType":"file",
"source":"cepconfig/eventbuilders/api__update__${mb.num}__${tenant.code}__${source.code_}_${stream.code}__EventBuilder.xml",
"action":"editActiveEventBuilderConfiguration",
"destination":"${mb.host}/services/EventBuilderAdminService",
"returnExpected":"200", 
"validityControl":"<fault>",
"username":"${mb.secuser}", 
"password":"${mb.secpassword}"
}
</#if>
<#else>
 <#list internalStreamInfo as internalStream>
,{
"number": "${x}",<#assign x = x+1> 
"description":"Installazione event Builder per ogni nodo CEP : ${tenant.code}__${source.code_}__${stream.code}__EventBuilder", 
"actionType":"WebServiceCall",
"sourceType":"file",
"source":"cepconfig/eventbuilders/api__update__${mb.num}__${internalStream.tenantCode}__${internalStream.veCode_}_${internalStream.streamCode}__EventBuilder.xml",
"action":"editActiveEventBuilderConfiguration",
"destination":"${mb.host}/services/EventBuilderAdminService",
"returnExpected":"200", 
"validityControl":"<fault>",
"username":"${mb.secuser}", 
"password":"${mb.secpassword}"
}
 </#list>
</#if> <#-- CREATION OF FORMTTER ON CEP   -->
<#if source.type!="Internal">
,{
"number": "${x}",<#assign x = x+1> 
"description":"Installazione event Formatter per ogni nodo CEP : api__update__direct__${tenant.code}__${source.code_}_${stream.code}__EventFormatter", 
"actionType":"WebServiceCall",
"sourceType":"file",
"source":"cepconfig/eventformatters/api__update__direct__${tenant.code}__${source.code_}_${stream.code}__EventFormatter.xml",
"action":"editActiveEventFormatterConfiguration",
"destination":"${mb.host}/services/EventFormatterAdminService",
"returnExpected":"200", 
"validityControl":"<fault>",
"username":"${mb.secuser}", 
"password":"${mb.secpassword}"
}<#if stream.persisted?? && stream.persisted ="true">
,{
"number": "${x}",<#assign x = x+1> 
"description":"Installazione event Formatter per ogni nodo CEP : api__update__direct__${tenant.code}__${source.code_}_${stream.code}__MongoEventFormatter", 
"actionType":"WebServiceCall",
"sourceType":"file",
"source":"cepconfig/eventformatters/api__update__direct__${tenant.code}__${source.code_}_${stream.code}__MongoEventFormatter.xml",
"action":"editActiveEventFormatterConfiguration",
"destination":"${mb.host}/services/EventFormatterAdminService",
"returnExpected":"200", 
"validityControl":"<fault>",
"username":"${mb.secuser}", 
"password":"${mb.secpassword}"
}</#if>
<#else>
,{
"number": "${x}",<#assign x = x+1> 
"description":"Installazione event Formatter per ogni nodo CEP : api__update__output__${tenant.code}__${source.code_}_${stream.code}__EventFormatter", 
"actionType":"WebServiceCall",
"sourceType":"file",
"source":"cepconfig/eventformatters/api__update__output__${tenant.code}__${source.code_}_${stream.code}__EventFormatter.xml",
"action":"editActiveEventFormatterConfiguration",
"destination":"${mb.host}/services/EventFormatterAdminService",
"returnExpected":"200", 
"validityControl":"<fault>",
"username":"${mb.secuser}", 
"password":"${mb.secpassword}"
},{
"number": "${x}",<#assign x = x+1> 
"description":"Installazione event Internal Formatter per ogni nodo CEP : api__update__output__${tenant.code}__${source.code_}_${stream.code}__InternalEventFormatter", 
"actionType":"WebServiceCall",
"sourceType":"file",
"source":"cepconfig/eventformatters/api__update__output__${tenant.code}__${source.code_}_${stream.code}__InternalEventFormatter.xml",
"action":"editActiveEventFormatterConfiguration",
"destination":"${mb.host}/services/EventFormatterAdminService",
"returnExpected":"200", 
"validityControl":"<fault>",
"username":"${mb.secuser}", 
"password":"${mb.secpassword}"
}<#if stream.persisted?? && stream.persisted ="true">
,{
"number": "${x}",<#assign x = x+1> 
"description":"Installazione event Formatter per ogni nodo CEP : api__update__output__${tenant.code}__${source.code_}_${stream.code}__MongoEventFormatter", 
"actionType":"WebServiceCall",
"sourceType":"file",
"source":"cepconfig/eventformatters/api__update__output__${tenant.code}__${source.code_}_${stream.code}__MongoEventFormatter.xml",
"action":"editActiveEventFormatterConfiguration",
"destination":"${mb.host}/services/EventFormatterAdminService",
"returnExpected":"200", 
"validityControl":"<fault>",
"username":"${mb.secuser}", 
"password":"${mb.secpassword}"
}</#if>
</#if> <#-- CREATION OF EXECUTIONPLAN ON CEP   -->
<#if source.type=="Internal">
,{
"number": "${x}",<#assign x = x+1> 
"description":"Installazione event Execution Plans per ogni nodo CEP : api__update__process__${tenant.code}__${source.code_}_${stream.code}__ExecutionPlan", 
"actionType":"WebServiceCall",
"sourceType":"file",
"source":"cepconfig/executionplans/api__update__process__${tenant.code}__${source.code_}_${stream.code}__ExecutionPlan.xml",
"action":"editActiveExecutionPlanConfiguration",
"destination":"${mb.host}/services/EventProcessorAdminService",
"returnExpected":"200", 
"validityControl":"<fault>",
"username":"${mb.secuser}", 
"password":"${mb.secpassword}"
}
</#if>
</#list>
<#if source.type!="Internal" && source.type!="Feed Tweet">
,{
"number": "${x}",<#assign x = x+1> 
"description":"Installazione della Validazione sul Governance Registry, aggiungendo la collection con : api__deploy__${tenant.code}__${source.code}_${stream.code}__addCollection.xml", 
"actionType":"WebServiceCall",
"sourceType":"file",
"source":"esbconfig/api__deploy__${tenant.code}__${source.code_}_${stream.code}__addCollection.xml",
"action":"addCollection",
"destination":"${esbinfo.host}/services/ResourceAdminService",
"returnExpected":"200", 
"validityControl":"<fault>",
"username":"${esbinfo.secuser}", 
"password":"${esbinfo.secpassword}"
},{
"number": "${x}",<#assign x = x+1> 
"description":"Update della Validazione sul Governance Registry, aggiungendo lo schema XSD con : api__update__${tenant.code}__${source.code_}_${stream.code}__addTextResource.xml", 
"actionType":"WebServiceCall",
"sourceType":"file",
"source":"esbconfig/api__update__${tenant.code}__${source.code_}_${stream.code}__addTextResource.xml",
"action":"updateTextContent",
"destination":"${esbinfo.host}/services/ResourceAdminService",
"returnExpected":"200", 
"validityControl":"<fault>",
"username":"${esbinfo.secuser}", 
"password":"${esbinfo.secpassword}"
}
</#if>
<#if source.type=="Feed Tweet">
,{
"number": "${x}",<#assign x = x+1> 
"description":"Update del Task schedulato Twitter", 
"actionType":"WebServiceCall",
"sourceType":"file",
"source":"taskconfig/api__update__${tenant.code}__${source.code_}_${stream.code}__editTaskDescription.xml",
"action":"editTaskDescription",
"destination":"${esbinfo.host}/services/TaskAdmin",
"returnExpected":"200", 
"validityControl":"<fault>",
"username":"${esbinfo.secuser}", 
"password":"${esbinfo.secpassword}"
}</#if>
<#if stream.persisted?? && stream.persisted ="true">
,{
"number": "${x}",<#assign x = x+1> 
"description":"Inserimento dei metadati dello stream su MongoDB e creazione odata api",
"actionType":"MongoInstallation",
"sourceType":"api",
"source":"",
"action":"",
"destination":"${mongoconnection.url}metadata/insertFromStream",
"returnExpected":"",
"validityControl":"KO",
"username":"",
"password":""
}</#if>
<#if stream.published?? && stream.published ="true">
,{
"number": "${x}",<#assign x = x+1> 
"description":"Publicazione del api sullo store per lo stream",
"actionType":"MongoInstallation",
"sourceType":"api",
"source":"",
"action":"",
"destination":"${mongoconnection.url}store/apiCreateStreamStore",
"returnExpected":"",
"validityControl":"KO",
"username":"",
"password":""
}</#if>
]
}
